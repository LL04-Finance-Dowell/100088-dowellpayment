from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views
from .views import (
    PaypalPayment,
    StripePayment,
    VerifyPaypalPayment,
    VerifyStripePayment,
    WorkflowStripePayment,
    WorkflowVerifyStripePayment,
    WorkflowPaypalPayment,
    WorkflowVerifyPaypalPayment,
    StripePaymentPublic,
    VerifyStripePaymentPublic,
    PaypalPaymentPublic,
    VerifyPaypalPaymentPublic,
    StripePaymentPublicUse,
    VerifyStripePaymentPublicUse,
    PaypalPaymentPublicUse,
    VerifyPaypalPaymentPublicUse,
    BraintreeClientTokenView,
    Success,
    Error,
    ProcessGooglePaymentView,
    TinkCreatePayment,
    # YapilySupportedCountry,
    # InitializeNetPaymentYapily,
    # CreateNetPaymentYapily,
    # VerifyNetPaymentYapily,
    # NetPaymentPlaid,
    # GetAllBank,
    # CreatePayment,
)

urlpatterns = [
    path("stripe/initialize", StripePayment.as_view()),
    path("googlepay/initialize",ProcessGooglePaymentView.as_view()),
    path('get_client_token/', BraintreeClientTokenView.as_view(), name='get_client_token'),
    path("verify/payment/stripe", VerifyStripePayment.as_view()),
    path("paypal/initialize", PaypalPayment.as_view()),
    path("verify/payment/paypal", VerifyPaypalPayment.as_view()),
    path("workflow/stripe/initialize", WorkflowStripePayment.as_view()),
    path("workflow/verify/payment/stripe", WorkflowVerifyStripePayment.as_view()),
    path("workflow/paypal/initialize", WorkflowPaypalPayment.as_view()),
    path("workflow/verify/payment/paypal", WorkflowVerifyPaypalPayment.as_view()),
    path("stripe/initialize/public/<str:api_key>", StripePaymentPublic.as_view()),
    path(
        "verify/payment/stripe/public/<str:api_key>",
        VerifyStripePaymentPublic.as_view(),
    ),
    path("paypal/initialize/public/<str:api_key>", PaypalPaymentPublic.as_view()),
    path(
        "verify/payment/paypal/public/<str:api_key>",
        VerifyPaypalPaymentPublic.as_view(),
    ),
    path("stripe/initialize/public-use", StripePaymentPublicUse.as_view()),
    path(
        "verify/payment/stripe/public-use",
        VerifyStripePaymentPublicUse.as_view(),
    ),
    path("paypal/initialize/public-use", PaypalPaymentPublicUse.as_view()),
    path(
        "verify/payment/paypal/public-use",
        VerifyPaypalPaymentPublicUse.as_view(),
    ),
    path("success", Success.as_view()),
    path("error", Error.as_view()),
    path("pdf/<str:pdf_filename>", views.serve_pdf, name="serve_pdf"),
    path("tink/create/payment", TinkCreatePayment.as_view()),
    # path("yapily/supported-countries", YapilySupportedCountry.as_view()),
    # path("yapily/initialize/payment", InitializeNetPaymentYapily.as_view()),
    # path("yapily/create/payment", CreateNetPaymentYapily.as_view()),
    # path("yapily/verify/payment", VerifyNetPaymentYapily.as_view()),
    # path("plaid/initialize", NetPaymentPlaid.as_view()),
    # path("token/all-bank", GetAllBank.as_view()),
    # path("token/create-payment", CreatePayment.as_view()),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
